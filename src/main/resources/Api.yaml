---
openapi: 3.0.0
info:
  title: WorkOut Api
  description: Api of backend workout application
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/SuperMegaTeamForDev/Workout/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: http://79.133.181.7:8080/api
    description: Develop server
tags:
  - name: Dashboard
  - name: Notification
  - name: Plan
  - name: Recommendations
  - name: Training
paths:
  /dashboard/{userId}:
    get:
      tags:
        - Dashboard
      summary: get Dashboard statistic for user
      operationId: getDashboard
      parameters:
        - name: userId
          in: path
          description: user account from telegram
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: returns graph
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dashboard'
        "400":
          description: bad input parameter
        "404":
          description: type not found or user not found
  /notification:
    post:
      tags:
        - Notification
      summary: enable notification by type
      operationId: enableNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        "200":
          description: enable notification
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        "404":
          description: 'User not found'
  /recommendations:
    get:
      tags:
        - Recommendations
      summary: "GET recommendations"
      operationId: "getTrainingRecommendations"
      parameters:
        - name: "type"
          in: "query"
          required: false
          schema:
            type: "string"
            enum:
              - "cardio"
              - "olympic_weightlifting"
              - "plyometrics"
              - "powerlifting"
              - "strength"
              - "stretching"
              - "strongman"
        - name: "muscle"
          in: "query"
          required: true
          schema:
            type: "string"
            enum:
              - "abdominals"
              - "abductors"
              - "adductors"
              - "biceps"
              - "calves"
              - "chest"
              - "forearms"
              - "glutes"
              - "hamstrings"
              - "lats"
              - "lower_back"
              - "middle_back"
              - "neck"
              - "quadriceps"
              - "traps"
              - "triceps"
        - name: "difficulty"
          in: "query"
          required: false
          schema:
            type: "string"
            enum:
              - "beginner"
              - "intermediate"
              - "expert"
        - name: "offset"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TrainingApiResponse"
  /public/trainings/plan:
    post:
      tags:
        - Training
        - Plan
      summary: "POST public/trainings/plan"
      operationId: "setTrainingPlanForUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingPlanDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TrainingPlanEntity"
  /public/trainings/complete:
    post:
      tags:
        - Training
        - Plan
      summary: "POST public/trainings/complete"
      operationId: "setTrainingCompleteForUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingCompleteDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TrainingCompleteEntity"
  /public/trainings:
    post:
      tags:
        - Training
      summary: "POST public/trainings"
      operationId: "createTraining"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TrainingEntity"
    get:
      tags:
        - Training
      summary: "GET public/trainings"
      operationId: "getAllTrainingByUserId"
      parameters:
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TrainingEntity"
  /public/trainings/{id}:
    get:
      tags:
        - Training
      summary: "GET public/trainings/{id}"
      operationId: "getTrainingById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TrainingEntity"
    put:
      tags:
        - Training
      summary: "PUT public/trainings/{id}"
      operationId: "updateTraining"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainingDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TrainingEntity"
  /public/trainings/{id}/exercises:
    post:
      tags:
        - Training
      summary: "POST public/trainings/{id}/exercises"
      operationId: "createExercise"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExerciseEntity"
    get:
      tags:
        - Training
      summary: "GET public/trainings/{id}/exercises"
      operationId: "findAllExerciseByUserIdAndTrainingId"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExerciseEntity"
  /public/trainings/exercises:
    post:
      tags:
        - Training
      summary: "POST public/trainings/exercises"
      operationId: "createExerciseByUserId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExerciseEntity"
    get:
      tags:
        - Training
      summary: "GET public/trainings/exercises"
      operationId: "findAllExerciseByUserId"
      parameters:
        - name: "userId"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ExerciseEntity"
  /public/trainings/exercises/{exerciseId}:
    put:
      tags:
        - Training
      summary: "PUT public/trainings/exercises/{exerciseId}"
      operationId: "updateExerciseById"
      parameters:
        - name: "exerciseId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ExerciseEntity"
components:
  schemas:
    TrainingPlanDto:
      type: "object"
      properties:
        userId:
          type: "string"
        trainingId:
          type: "integer"
          format: "int64"
        days:
          type: "array"
          items:
            type: "string"
            enum:
              - "MONDAY"
              - "TUESDAY"
              - "WEDNESDAY"
              - "THURSDAY"
              - "FRIDAY"
              - "SATURDAY"
              - "SUNDAY"
              - "ENUMS"
    User:
      type: "object"
      properties:
        name:
          type: "string"
        password:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        createdDate:
          type: "string"
          format: "date-time"
        updatedDate:
          type: "string"
          format: "date-time"
        deletedDate:
          type: "string"
          format: "date-time"
    ExerciseEntity:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/User"
        trainingEntities:
          type: "array"
          items:
            $ref: "#/components/schemas/TrainingEntity"
        name:
          type: "string"
        sets:
          type: "integer"
          format: "int32"
        repeats:
          type: "integer"
          format: "int32"
        time:
          type: "string"
          format: "partial-time"
        weight:
          type: "integer"
          format: "int32"
        comment:
          type: "string"
        id:
          type: "integer"
          format: "int64"
        createdDate:
          type: "string"
          format: "date-time"
        updatedDate:
          type: "string"
          format: "date-time"
        deletedDate:
          type: "string"
          format: "date-time"
    TrainingEntity:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/User"
        exercises:
          type: "array"
          items:
            $ref: "#/components/schemas/ExerciseEntity"
        comment:
          type: "string"
        enabled:
          type: "boolean"
        id:
          type: "integer"
          format: "int64"
        createdDate:
          type: "string"
          format: "date-time"
        updatedDate:
          type: "string"
          format: "date-time"
        deletedDate:
          type: "string"
          format: "date-time"
    TrainingPlanEntity:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/User"
        training:
          $ref: "#/components/schemas/TrainingEntity"
        days:
          type: "string"
          enum:
            - "MONDAY"
            - "TUESDAY"
            - "WEDNESDAY"
            - "THURSDAY"
            - "FRIDAY"
            - "SATURDAY"
            - "SUNDAY"
            - "ENUMS"
        id:
          type: "integer"
          format: "int64"
        createdDate:
          type: "string"
          format: "date-time"
        updatedDate:
          type: "string"
          format: "date-time"
        deletedDate:
          type: "string"
          format: "date-time"
    ExerciseDto:
      type: "object"
      properties:
        userId:
          type: "string"
        exerciseId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        sets:
          type: "integer"
          format: "int32"
        repeats:
          type: "integer"
          format: "int32"
        time:
          type: "string"
          format: "partial-time"
        wight:
          type: "integer"
          format: "int32"
        comment:
          type: "string"
        trainingId:
          type: "integer"
          format: "int64"
    TrainingDto:
      type: "object"
      properties:
        userId:
          type: "string"
        exerciseDtoList:
          type: "array"
          items:
            $ref: "#/components/schemas/ExerciseDto"
        comment:
          type: "string"
        enabled:
          type: "boolean"
    Dashboard:
      required:
        - data
        - type
      type: object
      properties:
        type:
          type: object
          items:
            $ref: '#/components/schemas/Type'
          example: graph-sleep
        data:
          type: array
          example:
            - date: 2023-01-01
              sleepNeeded: 12
              sleepActual: 8
              neededAvg: 8.5
              actualAvg: 6.5
            - date: 2023-01-02
              sleepNeeded: 8
              sleepActual: 12
              neededAvg: 8.5
              actualAvg: 6.5
            - date: 2023-01-03
              sleepNeeded: 6
              sleepActual: 12
              neededAvg: 8.5
              actualAvg: 6.5
          items:
            $ref: '#/components/schemas/DashboardData'
    DashboardData:
      type: object
      properties:
        date:
          type: string
          example: 2023-01-01
        plan:
          type: integer
          example: 12
        actual:
          type: integer
          example: 8
        planAvg:
          type: integer
          example: 12
        actualAvg:
          type: integer
          example: 8
    Type:
      type: string
      enum: [ calories, sleep, training ]
    Notification:
      type: object
      required:
        - type
        - userId
      properties:
        type:
          type: object
          items:
            $ref: '#/components/schemas/Type'
          example: sleep
        userId:
          type: string
          example: '@Egor'
    TrainingApiResponse:
      type: "object"
      properties:
        name:
          type: "string"
        type:
          type: "string"
        muscle:
          type: "string"
        equipment:
          type: "string"
        difficulty:
          type: "string"
        instructions:
          type: "string"
    TrainingCompleteDto:
      type: "object"
      properties:
        userId:
          type: "string"
        trainingId:
          type: "integer"
          format: "int64"
        days:
          type: "string"
          format: "date-time"
    TrainingCompleteEntity:
      type: "object"
      properties:
        userId:
          $ref: "#/components/schemas/User"
        trainingId:
          $ref: "#/components/schemas/TrainingEntity"
        date:
          type: "string"
          format: "date-time"
        id:
          type: "integer"
          format: "int64"
        createdDate:
          type: "string"
          format: "date-time"
        updatedDate:
          type: "string"
          format: "date-time"
        deletedDate:
          type: "string"
          format: "date-time"